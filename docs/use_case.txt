Клиент в браузере.

Класс User
Будет иметь следующие атрибуты:
Uuid – уникальный id пользователя
Nickname
Balance


Класс Player
будет наследоваться от класса User и. Экземпляр этого класса будет создаваться каждый раз, когда игрок будет открывать окно стола и удаляться, когда игрок закроет стол, НО перед тем, как это произойдет, его баланс должен обновиться в классе User и история раздач сохраниться в отдельном файле. В этом классе будут следующие атрибуты:
Номер очереди, если за стол собралась очередь игроков.
Номер стола, за которым играет пользователь, возможно, название стола.
Статус в игре:
is_afk: bool = False – если игрок afk, т. е. выбран check-box afk, то ему не будут раздаваться карты. в начале следующей раздачи.
При этом, если он участвует в розыгрыше банка и не в статусе ва-банк, то будет автоматически чекать каждую улицу и сбросит карты, если кто-то поставит.
По умолчанию, False. Если игрок при раздаче карт не определился с ходом за интервал времени, карты скидываются, а значение атрибута выставляется False и галочка автоматически ставится в соответствующем чек-боксе.
Отдельно будет про большой блайнд. В самом начале будет предложено поставить 1 большой блайнд для присоединения к игре или выбрать чек-бокс – дождаться хода, пока подойдет к нему большой блайнд.
Если пользователь после таймера попал в статус is_afk (или если сам поставил статус True), но вышел из него ДО того, как началась следующая игра за столом, то ему не нужно будет ставить 1 большой блайнд или дожидаться хода, пока дойдет очередь до него.
Если пользователь после таймера (или если сам поставил статус True) попал в статус is_afk, но вышел из него ПОСЛЕ того, как началась следующая игра за столом, то ему нужно будет поставить 1 большой блайнд или дожидаться хода, пока дойдет очередь до него.
Есть нюансы: а если кто-то вышел перед его очередью…

Метод действие (player_action), имеет следующие данные is_fold = False по умолчанию, call – уравнять последнюю ставку, raise – повысить ставку на определенное значение, кратное, check – ничего не предпринимать, если уже вложился в банк и никто не повысил)
Требования к ставке есть только минимальные: она должно быть не меньше, чем предыдущий рейз. Например, в самом начале раздачи нельзя сделать рейз размером менее одного большого блайнда. Если при блайндах $10/$20, игрок делает опен-рейз $50, какого минимального размера может быть ререйз?
Первый рейз в этой раздаче увеличил ставку на $30 (поставили $50, до этого ставка была $20).
Следовательно, минимальный ререйз составляет $50+$30=$80.
По общепринятым правилам, минимальный ход должен быть не меньше, чем двойной размер текущего большого блайнда.

Карманные карты (pocket_cards) – будет состоять из 2 случайных карт, которые игрок получает в начале каждой раздачи.
Итоговая комбинация (final_combo) – для начального упрощения логики предлагаю определять этот атрибут пока что без промежуточных состояний. Т. е. комбинации на префлопе, флопе и терне пока что будут определять лишь сами игроки. Программа будет определять комбинацию, только если состоится шоу даун – то есть вскрытие или если создадутся условия для шоу дауна.
Скорее всего, нужно сразу писать закрытую логику определения final_combo (5 лучших карт из 7 всего) для каждого игрока, участвующего в раздаче (is_afk = False). Всего возможно 133 784 560 комбинаций из 7 карт в колоде в 52 карты.

Сочетанием из n по k называется набор элементов k выбранных из n не учитывая порядок. Оно в свою очередь равно биномиальному коэффициенту.
где n — это 52 карты в колоде, k — 7 карт, которые мы из неё выбираем. И мы получаем подставив всё в формулу 133 784 560 комбинаций.
Идеальная хеш функция — это хеш-функция, которая отображает отдельные элементы множества в ключи без пересечений. Что в свою очередь позволяет нам искать эти значения по ключу за O(1).
В случае с техасским наше множество это 133 784 560 комбинаций из 7 карт в колоде в 52 карты. В соответствие которым можно поставить разные покерные руки. Каждую комбинацию мы можем представить в виде ключа определив его через 52 битное представление:
https://habr.com/ru/articles/705488/
Займет много памяти. Попробую через другие представления (двоичные представления мастей, а ранги??? Либо еще как-то)
Причем тут есть НЮАНСЫ:
Стрит-флэш – на доске может быть выложен готовый стрит-флэш из общих 5 карт. НО у кого-то может быть старший стрит-флэш или ДАЖЕ флэш-рояль за счет усиления на карманных картах (pocket_cards) игрока. Если усиления за счет pocket_hands нет ни у одного игрока, дошедшего до вскрытия, то банк поделиться пополам между всеми участниками раздачи, которые дошли до вскрытия! Это надо учесть при написании тестов!
Фул-хаус – на доске может быть выложен готовый фул-хаус из общих 5 карт. Но могут быть старшие фул-хаусы у игроков, за счет усиления на старших карманках (5 из 7). Распределение лучших комбинаций в порядке старшинства по убыванию. Если общий фул-хаус старший для всех, то банк поделится между всеми игроками, дошедшими до вскрытия.
Далее для следующих комбинаций
Флэш -
Стрит -
Сет (трипс) -
2 пары -
Пара -
Старшая карта -
Эти комбинации могут быть готовыми из общих 5 карт на столе причем формировать сильнейшую (5 из 7 карт) комбинацию для всех игроков – тогда банк делится на всех. Либо у каких-то игроков могут быть более сильные вариации каждой из этих комбинаций за счет усиления собственными карманными картами.
Распределение final_combo у игроков (ТОЛЬКО у тех у кого is_fold в методе player_action()  НЕ РАВНО TRUE!) должно идти в порядке старшинства по убыванию за счет усиления карманными картами. Если нет усилений ни у кого, то банк делится на участников.
position – позиция  игрока. Определяется в самом начале каждого раунда (если атрибут игрока is_afk == False) относительно позиции дилера в предыдущей раздачи и количества игроков, на которых раздались карты.




Класс Table
Номер стола (или uuid стола)
Uuid стола
Номер раздачи – включается, когда за столом от 2 активных игроков.
Время раздачи каждой улицы -
Игроки за столом – учесть ники и их uuid или только одно что-то???
История раздач
Метод (или функция) определения победителя (победителей). У кого из участников раздачи будет лучшее final_combo, тот и будет победителем и забирает главный банк.
Если будут побочные банки (победитель вложился меньше других игроков, дошедших до вскрытия), то они будут распределяться в порядке убывания ценности final_combo каждого из них.
Если проигравший игрок вложил фишек больше, чем победитель, то ему возвращается остаток от банка на его переплату. Ну или продумать логику, что в банке будут лишь те деньги, которые нужны для уравнивания ва-банка (олына) сраза.
Количество игроков в очереди.
Количество игроков за столом -
Количество активных игроков (total_active_players), на которых раздаются poker_hands (если как минимум 2 игрока в начале новой раздачи имеют атрибут is_afk = False. Нужен ли ?

Метод определения активных игроков - игроки, у которых атрибут is_afk = False в начале нового раунда. На них будут раздаваться карты.
Метод определения большого, малого блайнда и дилера на основании предыдущих раздач (а если их не было?) и количества активных игроков. Когда какой игрок ходит. В каком классе это нужно реализовать????
А если стол был пустой и игроки только пришли???
Метод смена позиций –
Метод ход игрока -

ЧТО ВЫНОСИТЬ В КЛАСС TABLE, А ЧТО ВЫНОСИТЬ В КЛАСС GAME???
